#!/usr/bin/env python3
import http.client
import io
import json
import mimetypes
import sys
import time

service = 'https://paste.fooster.io'

store_https = True
store = 'store.fooster.io'
namespace = '/paste'

interval = 604800 # 1 week

class AliasExistsError(Exception):
	pass

class FileTooLargeError(Exception):
	pass

class BadAliasError(Exception):
	pass

class UnknownError(Exception):
	pass

def upload(stream, alias=None, name=None, language=None):
	if store_https:
		conn = http.client.HTTPSConnection(store)
	else:
		conn = http.client.HTTPConnection(store)

	if alias:
		resource = '/api' + namespace + '/' + alias
		method = 'PUT'
	else:
		resource = '/api' + namespace + '/'
		method = 'POST'

	try:
		data = stream.readall()
	except AttributeError:
		data = stream.read()

	if isinstance(data, str):
		data = data.encode()

	payload = {}

	payload['filename'] = name
	payload['type'] = language

	if payload['filename'] is None:
		if stream is not sys.stdin:
			payload['filename'] = stream.name
		else:
			payload['filename'] = 'Unnamed'

	if payload['type'] is None:
		mime = mimetypes.guess_type(payload['filename'])[0]
		if mime:
			payload['type'] = mime
		else:
			payload['type'] = 'text/plain'

	payload['size'] = len(data)

	payload['expire'] = time.time() + interval
	payload['locked'] = True

	headers = {'Content-Type': 'application/json'}


	conn.request(method, resource, headers=headers, body=json.dumps(payload).encode())

	response = conn.getresponse()

	returned = json.loads(response.read().decode())

	if response.status != 201:
		if returned['error'] == 403:
			raise AliasExistsError()
		elif returned['error'] == 413:
			raise FileTooLargeError()
		elif returned['error'] == 404:
			raise BadAliasError()
		else:
			raise UnknownError()

	resource = '/store' + namespace + '/' + returned['alias']
	method = 'PUT'

	headers = {'Content-Length': len(data)}

	conn.request(method, resource, body=data)

	response = conn.getresponse()
	response.read()

	if response.status != 204:
		raise UnknownError()

	location = service + '/' + returned['alias']

	conn.close()

	return location

if __name__ == '__main__':
	import sys

	from argparse import ArgumentParser, FileType

	parser = ArgumentParser(description='upload pastes to the pastebin service at {}'.format(service))
	parser.add_argument('-a', '--alias', dest='alias', help='alias to upload paste under (random if omitted)')
	parser.add_argument('-n', '--name', dest='name', help='name of paste (guessed if omitted)')
	parser.add_argument('-l', '--language', dest='language', help='language of paste (guessed if omitted)')
	parser.add_argument('file', nargs='?', default=sys.stdin.buffer, type=FileType('rb'), help='file to upload (reads from stdin if omitted)')

	args = parser.parse_args()

	try:
		print('created at ' + upload(args.file, args.alias, args.name, args.language))
	except AliasExistsError:
		print('paste.py: error: alias already exists', file=sys.stderr)
		sys.exit(3)
	except FileTooLargeError:
		print('paste.py: error: input file is too large', file=sys.stderr)
		sys.exit(4)
	except BadAliasError:
		print('paste.py: error: alias does not exist', file=sys.stderr)
		sys.exit(5)
	except UnknownError:
		print('paste.py: error: an unknown error occured', file=sys.stderr)
		sys.exit(1)
